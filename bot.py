import random
import string
import json
import os
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler

KEYS_FILE = "keys.json"
DATE_FORMAT = "%Y-%m-%d"

def load_keys():
    if os.path.exists(KEYS_FILE):
        with open(KEYS_FILE, "r") as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}

def save_keys(keys):
    with open(KEYS_FILE, "w") as f:
        json.dump(keys, f)

def generate_unique_key(existing_keys, length=12):
    while True:
        suffix = ''.join(random.choices(string.ascii_uppercase + string.digits, k=length))
        new_key = f"nearmod-{suffix}"
        if new_key not in existing_keys:
            return new_key

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.message.from_user.id)
    keys = load_keys()

    existing_keys = {data.get("key") for data in keys.values() if data.get("key")}

    if user_id in keys:
        data = keys[user_id]
        key = data.get("key")
        exp_date = data.get("expiration_date")
        reissue_status = data.get("reissue_status", "—Ä–∞–∑—Ä–µ—à–µ–Ω–∞")

        if not key or not exp_date:
            key = generate_unique_key(existing_keys)
            exp_date = (datetime.now() + timedelta(days=365)).strftime(DATE_FORMAT)
            reissue_status = "—Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
            keys[user_id] = {
                "key": key,
                "expiration_date": exp_date,
                "reissue_status": reissue_status
            }
            save_keys(keys)
    else:
        key = generate_unique_key(existing_keys)
        exp_date = (datetime.now() + timedelta(days=365)).strftime(DATE_FORMAT)
        reissue_status = "—Ä–∞–∑—Ä–µ—à–µ–Ω–∞"
        keys[user_id] = {
            "key": key,
            "expiration_date": exp_date,
            "reissue_status": reissue_status
        }
        save_keys(keys)

    keyboard = [
        [InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–ø—É—Å—Ç–∏—Ç—å –∫–ª—é—á üîÑ", callback_data="reissue_key")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        f"–¢–≤–æ–π –∫–ª—é—á: {key}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {exp_date}\n"
        f"–ü–µ—Ä–µ–≤—ã–¥–∞—á–∞ ‚Äî {reissue_status}",
        reply_markup=reply_markup
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = str(query.from_user.id)
    keys = load_keys()

    if query.data == "disabled":
        await query.answer("–ü–µ—Ä–µ–≤—ã–¥–∞—á–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞", show_alert=True)
        return

    if user_id not in keys:
        await query.edit_message_text("–£ —Ç–µ–±—è –Ω–µ—Ç –≤—ã–¥–∞–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å.")
        return

    data = keys[user_id]
    key = data.get("key")
    exp_date = data.get("expiration_date")
    reissue_status = data.get("reissue_status", "—Ä–∞–∑—Ä–µ—à–µ–Ω–∞")

    if not key or not exp_date:
        await query.edit_message_text("–î–∞–Ω–Ω—ã–µ –∫–ª—é—á–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã. –ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π.")
        return

    exp_date_dt = datetime.strptime(exp_date, DATE_FORMAT)
    if datetime.now() > exp_date_dt:
        await query.edit_message_text("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –∏—Å—Ç—ë–∫. –û–±–Ω–æ–≤–∏—Ç–µ –∫–ª—é—á.")
        return

    if reissue_status == "–∑–∞–ø—Ä–µ—â–µ–Ω–∞":
        await query.edit_message_text("–ü–µ—Ä–µ–≤—ã–¥–∞—á–∞ –∫–ª—é—á–∞ —É–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    existing_keys = {d.get("key") for d in keys.values() if d.get("key")}
    new_key = generate_unique_key(existing_keys)
    new_exp_date = (datetime.now() + timedelta(days=365)).strftime(DATE_FORMAT)

    data["key"] = new_key
    data["expiration_date"] = new_exp_date
    data["reissue_status"] = "–∑–∞–ø—Ä–µ—â–µ–Ω–∞"
    keys[user_id] = data
    save_keys(keys)

    keyboard = [[InlineKeyboardButton("–ü–µ—Ä–µ–≤—ã–¥–∞—á–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–∞ ‚ùå", callback_data="disabled")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.edit_message_text(
        f"–¢–≤–æ–π –Ω–æ–≤—ã–π –∫–ª—é—á: {new_key}\n"
        f"–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {new_exp_date}\n"
        f"–ü–µ—Ä–µ–≤—ã–¥–∞—á–∞ ‚Äî –∑–∞–ø—Ä–µ—â–µ–Ω–∞",
        reply_markup=reply_markup
    )

if __name__ == '__main__':
    app = ApplicationBuilder().token("7623160235:AAEoQPPYO8DHV67PeePlVrZGbIUy4RVeEsA").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()
